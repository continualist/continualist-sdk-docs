.. continualist_sdk documentation master file, created by
   sphinx-quickstart on Thu Jun  8 16:31:02 2023.
   You can adapt this file completely to your liking, but it should at least
   contain the root `toctree` directive.

Continualist SDK
================

.. toctree::
   :maxdepth: 2
   :caption: Contents:


What is Continualist SDK?
-------------------------

Are you tired of complex and time-consuming processes when it comes to 
building and maintaining AI predictors? Continualist SDK is a developer kit 
that transforms the way you develop AI, allowing you to obtain accurate 
predictors and update their knowledge without requiring any specialized 
AI-related knowledge.

Creating a model and adapting it to new unseen data is as simple as:
.. code-block:: python

   # Create the predictor and fit it by specifying data and task
   predictor = Predictor()
   predictor.fit(data, task)
   ...
   # Predict new data and obtain predictions that can be immediately used in your application
   predictor.predict(data)
   ...
   # Efficiently adapt the predictor to new data
   predictor.adapt(data)


Try it Yourself
---------------

See how you can build an image predictor and adapt it to new data in a matter of seconds: 
`usage Google Colaboratory notebook <https://colab.research.google.com/drive/1BA-3Cqv8tP5eslaaMUT7v-MFhbu1AkBy?usp=sharing>`_.

Because of the intrinsic limitations of current AI methodologies, creating and maintaining
AI predictors is particularly costly and inefficient.
To avoid that, the SDK leverages cutting-edge AutoML and Continual Learning algorithms to 
efficiently build AI predictors and update their knowledge.
See a comparison between the standard 
approaches used in the industry and the new solutions enabled by the 
SDK: `comparison Google Colaboratory notebook <https://colab.research.google.com/drive/1I-9slaNYu5KbxL8f9Kkg5e3hFx_93Q5n?usp=sharing>`_.


API
===

Data
----

.. py:class:: continualist_sdk.data.Data(x: numpy.ndarray, y: numpy.ndarray)

   Continualist SDK's data class. Data must be specified in this format to be
   used with the `Predictor` API.

   .. py:function:: __init__(x: numpy.ndarray, y: numpy.ndarray)

      Constructs a `Data` object from an input and a target tensor.

      :param x: Input tensor.
      :param y: Target tensor.


.. py:function:: continualist_sdk.data.split_mnist(train: bool, batches: int = 5, seed: Optional[int] = None)

   Loads data from the SplitMNIST dataset. This gives a quick way to obtain
   meaningful data that can be used with the SDK.

   If `train` is True, the function returns a list of `batches` 
   :py:func:`continualist_sdk.data.Data` objects 
   representing the batches taken from the SplitMNIST train stream.
   If `train` is False, the function returns a single `Data` object
   representing the whole test stream.

   :param train: If true, the returned datasets are constructed from the train
                    stream. If false, the test stream is used.
   :param batches: If set to true and `train` is false the function returns
                     a single batch of data representing the whole test stream.
   :param seed: Seed for reproducibility.
   :return: A `Data` object if train is True, a list of `Data` objects otherwise.
   :rtype: list[:py:func:`continualist_sdk.data.Data`] or :py:func:`continualist_sdk.data.Data`


Task
----

.. py:class:: continualist_sdk.task.Task(type: str = 'classification', data_type: str = 'images')

   Continualist SDK's task class. Tasks must be specified in this format to be
   used with the `Predictor` API.
   
   .. py:function:: __init__(self, type: str = 'classification', data_type: str = 'images')

      :param type: Defines the task type. Possible choices: `'classification'`.
      :param data_type: Defines the data type used in the task. Possible choices: `'images'`.


Predictor
---------

.. py:class:: continualist_sdk.predictor.Predictor(strategy_type: str = 'replay', 
      hpo_each_batch: bool = True)

   A Continualist SDK predictor. After initialization, 

   .. py:function:: __init__(self, strategy_type: str = 'replay', hpo_each_batch: bool = True)

      :param strategy_type: Specifies the strategy used by the predictor in the
         adaptation steps. Possible choices: `'replay', 'cumulative'`.
      :param hpo_each_batch: Specifies whether hyperparameter optimization must
         be executed for each adaptation step.

   .. py:function:: fit(self, data: continualist_sdk.data.Data, task: continualist_sdk.task.Task)

         Fits the predictor to the specified data and task.

         :return: A dictionary containing information about the fitting
            process.
         :rtype: dict

   .. py:function:: adapt(self, data: continualist_sdk.data.Data)

         Adapts a fitted predictor to the specified data.

         :return: A dictionary containing information about the adaptation
            process.
         :rtype: dict

   .. py:function:: predict(self, data: continualist_sdk.data.Data)

         Predicts new data.

         :return: A tuple `(inputs, predictions, metric)`
         :rtype: Tuple[numpy.ndarray, numpy.ndarray, float]


