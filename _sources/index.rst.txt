.. continualist_sdk documentation master file, created by
   sphinx-quickstart on Thu Jun  8 16:31:02 2023.
   You can adapt this file completely to your liking, but it should at least
   contain the root `toctree` directive.

Continualist SDK
================

.. toctree::
   :maxdepth: 2
   :caption: Contents:


What is Continualist SDK?
-------------------------

Are you tired of complex and time-consuming processes when it comes to 
building and maintaining AI predictors? Continualist SDK is a developer kit 
that transforms the way you develop AI, allowing you to obtain accurate 
predictors and update their knowledge without requiring any specialized 
AI-related knowledge.

See how you can build an image predictor and adapt it to new data in a matter of seconds: 
`usage Google Colaboratory notebook <https://colab.research.google.com/drive/1BA-3Cqv8tP5eslaaMUT7v-MFhbu1AkBy?usp=sharing>`_.
The SDK leverages cutting-edge AutoML and Continual Learning algorithms to 
efficiently update AI predictors. See a comparison between the standard 
approaches used in the industry and the new solutions enabled by the 
SDK: `comparison Google Colaboratory notebook <https://colab.research.google.com/drive/1I-9slaNYu5KbxL8f9Kkg5e3hFx_93Q5n?usp=sharing>`_.

API
===

Data
----

.. py:class:: continualist_sdk.data.Data(x: numpy.ndarray, y: numpy.ndarray)

   A Continualist SDK data object.

   .. py:function:: __init__(x: numpy.ndarray, y: numpy.ndarray)

      Constructs a `Data` object from an input and a target tensor.

      :param x: Input tensor.
      :type x: numpy.ndarray
      :param y: Target tensor.
      :type y: numpy.ndarray


.. py:function:: continualist_sdk.data.split_mnist(kind=None)

   Loads data from the SplitMNIST dataset.

   If `train` is True, the function returns a list of `batches` 
   :py:func:`continualist_sdk.data.Data` objects 
   representing the batches taken from the SplitMNIST train stream.
   If `train` is False, the function returns a single `Data` object
   that represents the whole test stream.

   :param train: If true, the returned datasets are constructed from the train
                    stream. If false, the test stream is used.
   :type train: bool
   :param batches: If set to true and `train` is false the function returns
                     a single batch of data representing the whole test stream.
   :type batches: int
   :param seed: Seed for reproducibility.
   :type seed: int
   :return: A `Data` object if train is True, a list of `Data` objects otherwise.
   :rtype: list[:py:func:`continualist_sdk.data.Data`] or :py:func:`continualist_sdk.data.Data`


Predictor
---------

.. py:function:: continualist_sdk.predictor.Predictor(kind=None)

   Prova

   :param kind: Optional "kind" of ingredients.
   :type kind: list[str] or None
   :raise lumache.InvalidKindError: If the kind is invalid.
   :return: The ingredients list.
   :rtype: list[str]
